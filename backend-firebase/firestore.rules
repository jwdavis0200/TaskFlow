rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to get user role in project
    function getUserRole(projectData, userId) {
      return projectData.owner == userId ? 'owner' : 
             (projectData.memberRoles != null && userId in projectData.memberRoles) ? 
             projectData.memberRoles[userId] : 
             (projectData.members != null && userId in projectData.members) ? 'editor' : null;  // backward compatibility
    }
    
    // Helper function to check if user has permission for action
    function hasPermission(projectData, userId, action) {
      let role = getUserRole(projectData, userId);
      return role != null && 
             ((action == 'view_only' && role in ['owner', 'admin', 'editor', 'viewer']) ||
              (action == 'edit_tasks' && role in ['owner', 'admin', 'editor']) ||
              (action == 'manage_boards' && role in ['owner', 'admin', 'editor']) ||
              (action == 'edit_project' && role in ['owner', 'admin']) ||
              (action == 'invite_members' && role in ['owner', 'admin']) ||
              (action == 'remove_members' && role in ['owner', 'admin']));
    }
    
    // Users can read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Projects: role-based access control
    match /projects/{projectId} {
      allow read: if request.auth != null && 
        hasPermission(resource.data, request.auth.uid, 'view_only');
      
      allow create: if request.auth != null && request.auth.uid != null;
      
      allow update: if request.auth != null && 
        hasPermission(resource.data, request.auth.uid, 'edit_project');
        
      allow delete: if request.auth != null && 
        resource.data.owner == request.auth.uid;
    }
    
    // Boards: role-based access through project
    match /boards/{boardId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
        hasPermission(get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data, request.auth.uid, 'view_only');
      
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId)) &&
        hasPermission(get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data, request.auth.uid, 'manage_boards');
      
      allow update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
        hasPermission(get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data, request.auth.uid, 'manage_boards');
    }
    
    // Columns: role-based access through project
    match /columns/{columnId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
        hasPermission(get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data, request.auth.uid, 'view_only');
      
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId)) &&
        hasPermission(get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data, request.auth.uid, 'manage_boards');
      
      allow update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
        hasPermission(get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data, request.auth.uid, 'manage_boards');
    }
    
    // Tasks: role-based access through project
    match /tasks/{taskId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
        hasPermission(get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data, request.auth.uid, 'view_only');
      
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId)) &&
        hasPermission(get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data, request.auth.uid, 'edit_tasks');
      
      allow update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
        hasPermission(get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data, request.auth.uid, 'edit_tasks');
    }
  }
}